package com.etong.sms.utility;

import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.XMLType;


import javax.xml.namespace.QName;
import javax.xml.rpc.ParameterMode;


/**
 * ------add-------
 *
 * @Description :云测网络请求部分
 */
public class YcSmsClient extends Thread {


    public static String strURL = "http://211.99.191.148";

    // safe URL
    //  public static String strURL =  "https://211.99.191.149:8443";
    // https://211.99.191.149:8443/mms/services/info?wsdl

    //private String regcode=null;
    // private String password=null;
    //
    public static String nameSpace = "http://info.pica.com";
    private String SHCNN_URI_SEND = "/mms/services/info";
    //  private static YcSmsClient api = null;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    String date = sdf.format(new Date());


    public YcSmsClient() {

    }
    /*
    public YcSmsClient(String regcode, String password)
    		throws UnsupportedEncodingException{
    	this.regcode=SystemConstant.SN;
    	this.password=SystemConstant.PWD;
    }
    	*/

    /**
     * @return
     */
    /*
    public static synchronized YcSmsClient getInstance() {

        if (api == null) {

            api = new YcSmsClient();
        }
        return api;
    }
    */
/*
    public void run() {

    	//接口调用范例===========================================================================================
    	
    	
    	
    	//注册    (客户在第一次使用时都要进行一次注册，把号码激活)
    	// only use one times.
     	System.out.println(	register("账号", "密码","公司全称","公司简称","公司地址","联系电话","联系人","email","传真","邮编","联系手机"));
     	//余额查询
    	System.out.println(	getbalance("账号", "密码"));
    	//关键词查询 Interface no nse
     	System.out.println(	getchannelcheck("账号", "密码","色情"));
     	//密码修改
     	System.out.println(modifypwd("账号", "old password","new password"));
     //	获取报告
     	System.out.println(	getReport("账号", "密码"));
     //	获取上行短信
    	
     	System.out.println(	getmo("账号", "密码"));
		//  MMS packet format string.
		 
     	    	String mmsid="1,jpg,;1,txt,1tC5+rqj0fPK1rv6sagNCrn6vNK6o9HzvtbW97ncDQrW0Ln6uqPR87GoyefW97DsDQoNCqG+t+exqbOxovO8tr6vsaijqLvGyaujqaG/DQo+Prn6vNK6o9Hz1KSxqMyoN9TCMjnI1TA4yrG3orK8o7rK3L3xxOq12ji6xce/yMi0+LfnsamhsMLlzLmhsbXE07DP7KOs1KS8xqO6MjnI1cnPzue1vTMwyNXJz87no6y547aryqHW6b2tv9rS1M731sHA19bdsOu1urarsLbSu7T40di6o72rs/bP1jUwwOXD16GrMTUwwOXD17XEt+exqdT2y66ju7qjxM+1urarsbGyv9HYuqO9q7P2z9Y1MMDlw9ehqzkwwOXD17XEt+exqdT2y66ho8nPyvawtrbOxNq1xNDj06Kzsc671b69q9PaMjnI1bD4ze2z9s/WwtSzrLn9tbG12L6vveSzsc67tcS437Oxzruho7fnsamzsdSkvq+8trHwzqq7xsmroaMNCg0Kob66o8DLovK8tr6vsaijqLPIyaujqaG/DQo+Prn6vNK6o9Hz1KSxqMyoN9TCMjnI1TA4yrG3orK8o7rK3L3xxOq12ji6xce/yMi0+LfnsamhsMLlzLmhsbXE07DP7KOs1KS8xqO6MjnI1dbQzue1vTMwyNXW0M7no6zEz7qjsbGyv72rs/bP1jTD16GrNsPXtcS+3sDLtb2/8cDLx/iju7njtqvO97K/oaK6o8TPoaK548730diwtrqj0/K9q7P2z9Yzw9ehqzXD17XEtPPAy7W9vt7Ay6OsueO2q7arsr/R2LC2uqPT8r2rs/bP1jLD16GrM8PXtcTW0MDLtb2088DLoaO6o8DL1KS+r7y2sfDOqrPIyauhow==;tim,50:2,txt,ob61vLbBob8NClvSqs7FXQ0Ko765+rzSuqPR877WMjAxMMTq1f64rrLJubrQxc+izbO8xrmk1/e78bHt1cMNCqO+tqvRx7qjvMa7rrXYt73V/riuzfjC58LbzLMyMDExxOq74dTatqvTqtXZv6oNCqO+yMi0+LfnsamhsMLlzLmhsb2rtcfCvcft1MHR2LqjDQpbuqPR87avzKxdDQqjvsXuwLMxOS0z083M70KhokPGvcyou7nU2tLn080NClu5+rzKuqPR810NCqO+xbfW3rqj0fO357Xn19zXsLv6wb/Jz7DrxOrNrLHI1PazpDQuNSUNClvIy87EuqPR810NCqO+ufrN4sO9zOXIyNLpobDy1MH6obG6xQ0KW7qj0fO/xsbVXQ0Ko77T5tK10fjWs7vyv8m94r72yMvA4Mqzxre2zMixDQoNCqG+0qrOxaG/DQq5+rzSuqPR877WyNm78TIwMTDE6tbQ0eu1pc671f64rrLJubrQxc+izbO8xrmk1/ex7dXDDQotLS0tLS0tLS0tLS0tLS0tDQo+Prn6vNK6o9HzvtbU2rLG1f6yv9fp1q+1xDIwMTDE6tbQ0eu1pc671f64rrLJubrQxc+izbO8xrmk1/fX27rPv7zGwNbQu/G1w7Ht1cOho7LG1f6yv82osaix7dHvwcu5+rzSuqPR877W1f64rrLJubrQxc+izbO8xrmk1/ehow==;tim,50:3,jpg,;3,txt,ob61vLbBob8NClvSqs7FXQ0Ko765+rzSuqPR877WMjAxMMTq1f64rrLJubrQxc+izbO8xrmk1/e78bHt1cMNCqO+tqvRx7qjvMa7rrXYt73V/riuzfjC58LbzLMyMDExxOq74dTatqvTqtXZv6oNCqO+yMi0+LfnsamhsMLlzLmhsb2rtcfCvcft1MHR2LqjDQpbuqPR87avzKxdDQqjvsXuwLMxOS0z083M70KhokPGvcyou7nU2tLn080NClu5+rzKuqPR810NCqO+xbfW3rqj0fO357Xn19zXsLv6wb/Jz7DrxOrNrLHI1PazpDQuNSUNClvIy87EuqPR810NCqO+ufrN4sO9zOXIyNLpobDy1MH6obG6xQ0KW7qj0fO/xsbVXQ0Ko77T5tK10fjWs7vyv8m94r72yMvA4Mqzxre2zMixDQoNCqG+0qrOxaG/DQq5+rzSuqPR877WyNm78TIwMTDE6tbQ0eu1pc671f64rrLJubrQxc+izbO8xrmk1/ex7dXDDQotLS0tLS0tLS0tLS0tLS0tDQo+Prn6vNK6o9HzvtbU2rLG1f6yv9fp1q+1xDIwMTDE6tbQ0eu1pc671f64rrLJubrQxc+izbO8xrmk1/fX27rPv7zGwNbQu/G1w7Ht1cOho7LG1f6yv82osaix7dHvwcu5+rzSuqPR877W1f64rrLJubrQxc+izbO8xrmk1/ehow==;tim,50:4,txt,ob66o9Hzv+zRtqG/DQo+Ps6qwcu9+NK7sr3X9rrDobbIq7n6yfrMrLGju6TT672oyei55ruuo6gyMDExxOqhqzIwMjDE6qOpobe6o9HzwezT8s/gudjE2sjdtcSx4NbGuaTX96Os08m5+rzSt6LVubrNuMS4786v1LG74cWptOW+rbzDy764utTwyMu0+MHstcS199HQ1+m4sMm9tqvH4LW6vfjQ0Lqj0fPJ+syssaO7pLmk1/e199HQoaMNCg0KPj7JvbaryqHRzMyoytDK173suqPR87mr0ubQ1NT21rO3xcH3u+62r8b0tq/Sx8q91NrRzMyovq28w7y8yvW/qreix/iwy73H0+a4277Z0NCho7my09AzNLzSxvPStcjPubqhosjPvujD59bWNDc3Mc3ytaXOu6OsubK829a1Mjcw0+DN8tSqoaMNCg0KPj7X986qMjAxMcTqztK5+tSuzeK24LHfxeDRtdbY0qrP7sS/1q7Su7XEt8fW3reo0++5+rzSuqPR89Pm0rW53MDt0dDQ3rDgMjbI1dTaz8PDxcrQv6qw4KGj1eLKx72oufrS1MC0ztK5+srXuPbXqMPF1eu21LfH1t63qNPvufq80rXEuqPR89Pm0rXUrs3ixeDRtc/uxL+ho6Ooz8PDxcrQyMvD8dX+uK6jqQ0KDQo+Pr3xuvM1xOqjrNXjva29q7C01dW08tTsz9a0+rqj0fOy+tK1zOXPtbXE0qrH86OsyrXKqaGw1eO9rbjf0KO6o9Hz0ae/xteo0rW9qMnoMzM1uaSzzKGxo6jW0Ln6vczT/bGoo6k=;tim,50:5,txt,ob66o9Hztq/MrKG/DQrF7sCzMTktM9PNzO9CoaJDxr3MqLu51NrS59PNDQotLS0tLS0tLS0tLS0tLS0tDQo+PsXuwLMxOS0z083M79Ln083KwrnKt6LJ+tLRvfzBvbj21MKjrLWruqO84Na0t6jIy9Sx1+7QwrzgytO84LLit6LP1qOsQqGiQ8a9zKjI1NPQ0ufTzbP2z9ajrM7byL66o9Pyw+a7/b3Px7C8uMjV09DL+dT2tPOhow0KDQo+Prn6vNK6o9Hzvtaxsbqjt9a+1tLRz/K/tbfGuavLvs/Ct6LNqNaqo6zU8LPJxuS8zND4ttS6o8Pm0ufTzb340NDT0NCnzqe/2KGitKbWw7rNx+XA7aOs0qrH88bksLLFxdeow8W1xNa1yti0rKOsttRCxr3MqKGivK/TzdXWuL29/Lqj0/LKtcqpMjTQocqxvODK06Ost6LP1tLn083Bory0x+XA7aOst6LP1tDCtcTS59PNtePBory0vfjQ0MXFsumho82syrGjrNTZtM7Sqsfzv7W3xrmry76yycih0rvH0NPQ0Ke068qp09o41MIzMcjVx7CzubXXxcWy6bKix9C2z9Ln083UtKOss7m118XFsumyos/7s/3U2bTOt6LJ+tLn0821xLfnz9Who6Oo0MK7qs34o6kNCg0KMjAxMLnjtqu9/DSzycjruqPFxc7bv9qzrLHqxcW3xQ0KLS0tLS0tLS0tLS0tLS0tLQ0KPj7X8sjVo6zTybnjtqvKobqj0fPT69Pm0rW+1reisry1xKG2MjAxMMTqueO2q8qhuqPR87u3vrPWysG/uauxqKG3zbjCtqOsyKXE6siryqG6o9Hzu7e+s9bKwb/X3MzlsaOz1rv5sb7OyLaoo6zRz9bYztvIvrqj0/LD5rv9scjJz8TqvPXJ2TYuNiWjrM7by666zc7byL7O78jruqPBv775vc/Jz8Tq09DL+b21tc2ho7K7uf2jrMq1yqm84LLitcTI67qjxcXO27/axcW3xbOsserCytS8MzguNSWho6OoxM+3vcjVsaijqQ==;tim,50:6,jpg,;6,txt,ob65+rzKuqPR86G/DQq6q7n6u7exo8jLyr+69NP1zey+yL6oDQotLS0tLS0tLS0tLS0tLS0tDQo+PjfUwjI2yNWjrLqrufq7t7GjyMvKv9Tayte2+77Z0NDTztDQo6y69NP1zey+yL6ooaK6o+vgtci6o9HzyfrO76OssaO7pLqj0fOho6Oo0MK7qs34o6kNCg0KxbfW3rqj0fO357Xn19zXsLv6wb/Jz7DrxOrNrLHI1PazpDQuNSUNCi0tLS0tLS0tLS0tLS0tLS0NCj4+xbfW3rfnxNzQrbvh1+7Qwreise21xNK7t92xqLjmz9TKvqOsxbfW3rXYx/i98cTqx7A2uPbUwtDCzbay+jEwMcyouqPR87fntee7+tfpo6zX3Newu/rBv738MzXN8senzd+jrM2sscjU9rOkNC41JaGjDQoNCj4+vdjWwTIwMTHE6jbUwjMwyNWjrDQ5uPbFt9beuqPR87fnteezobfWsrzU2jm49rn6vNKjrNO109AxMjQ3zKjV/dTa1MvQ0LXEt+e157v61+mjrNfc17C7+sG/s6y5/TMyOc3yx6fN36Gjo6jQwruqyeejqQ==;tim,50:7,txt,ob7Iy87EuqPR86G/DQq5+s3iw73M5cjI0umhsPLUwfqhsbrFDQotLS0tLS0tLS0tLS0tLS0tDQo+PsPAufqhtruqtvu91sjVsaiht738yNW3orHtxsDC287E1cLWuLP2o6zW0Ln61NrHscuuye62yMHs0/KzrLn9wcvDwLn6o6zD98Tqvau8xruus6y5/dTauMPB7NPytcS52r78yNWxvqGjw8C5+qG219TIu6G31NPWvtTyxsDC28u1o6yhsPLUwfqhsbrFs8m5ps27xsY1MDAww9fLrsnuysfW0Ln6ttTX1Mi7zL3L97XEwPrKt9DUyrG/zKOs1eLVucq+wcvW0Ln6zL3L98nuuqPXytS0tcTQ29DEoaMNCg0KPj7I1bG+obay+r6t0MLOxaG3sai1wMjPzqqjrNbQufrX1Nb30dC3osnuuqPHscuuxvfS4tTavfjSu7K9yLexo7qj0fPIqNLmoaPI1bG+obbQwruqx8ixqKG3v6/OxMu1o6zW0MjVwb25+r6tvMO1xLulsrnQ1NeitqjLq7e9tcS6z9f3tuDT2r661fmhotPF09q+utX5oaPU2snmvLC7t7Gjus/X97XIuPzJ7rLjtM61xNfK1LS/qreiyc+jrNbQyNXBvbn6tcS6z9f3vau4/Na1tcPG2rT9oaMNCg0KPj63qNDCyee3orHtxsDC287E1cLLtaOsobDy1MH6obG6xcihtcO1xNfu0MLJ7sexvM3CvLTTwO3C28nPserWvtfFtPPR87XXsr+34bi7tcTXytS0trzU2tbQufq/yb3TtKW3ts6nxNrBy6Gj1eLKx9K7uPa+3rTztcSzyb7No6zNuc/UwcvW0Ln6v+zL2bei1bm1xLy8yvXKtcGmoaMNCg0KPj7Torn6obbDv8jVtefRtrGoobfIz86qo6yhsPLUwfqhsbrFtPqx7dfF1tC5+qGwtPLP7MHL1fe3/rqj0fO1xNW9trehsaOsvqG53Mv8xL/HsLXEyM7O8crHtL+/xtGnwezT8qOstavKx9bQufrV/riuz6PN+6Gw8tTB+qGxusXMvcv3ye66o7XExNzBpsTcyMPW0Ln6tKbT2sHsz8i1xNPFysa12M67o6y21MnuuqO1xLTzwb+98Mr0v/Oy2L340NC6z8DtwPvTw6Gj;tim,50:8,txt,ob66o9Hzv8bG1aG/DQrT5tK10fjWs7vyv8m94r72yMvA4Mqzxre2zMixDQotLS0tLS0tLS0tLS0tLS0tDQo+PrDNzvfKpbGjwt6089GnuqPR89HQvr/L+b3Mytq1pMThtvsusK61wruqtuAuwLPEqsu5yNXHsNTazOLOqqGwy66y+tH41rPStdPjwOC1sLDX1srP+7uvwsrK1LncsuK2qKGxtcTR0L6/sai45tbQzOGz9qOs19QyMDAwxOrG8KOsysC957K2wMzStbL6wb/U9rOkzaPWzaOstvjLrrL60fjWs9K11PLE6sTq1PazpKOsxL/HsNPjwODS0b6ts8nOqsjLwOC8zNbtyOLWrrrztcS12rb+tPO2r87vtbCw18C01LSho7GouObIz86qo6y088Gmt6LVudH41rPT5tK1o6zKx8jLwOC94r72yrPGt7bMyLG1xNbY0qrNvr62oaMNCg0KPj6xqLjmyM/OqqOst6LVudH41rPT5tK1ytfPyNKq0bDV0r/JzOa0+svHwc+ho9Xi1tbLx8HPv8nS1NPJxanStbi9svrGt73ivvajrLy0yrnTw7TW9M/Gt6OsyOfL6cPXtcijrL2rvqvWxsWpsvrGt9PD09rIy8DgyrPGt7b4t8e2r87v0fjWs6GjtMvN4qOsNTAl0tTJz7XE0fjWs9PjwOCyu7HY08PLrtTloaLEtfLDoaLJyLG0oaK1rbLLu/LT48Dg1eLQqczsyLvO79bK1/fLx8HPo6y007b4vPXJ2cHLtq/O77WwsNe1xM/7usShow0KDQrXoqO60tTJz7P9serD97P2tKbN4r75wLTX1KG21tC5+rqj0fOxqKG3vMfV36GjDQoNCr/Nt/7IyM/fo7oNCjAxMC01MTc5ODM2Ng==;tim,50";
    	for (int i = 0; i < 1; i++)  
		{
					    		
					    	// send sms	sample ----> 	sendEx( "ZXHD-SDK-0102-******",  "123321",i+"sms content-->諄㎡尊敬的\":asdfghjkl1234567890<>?!@#$^&*()_~~!!@#$%^&*()_L:<>諄㎡。", "13800138000","1234");
					      				  
					      			sendEx( Regcode,  Pwd, content, mobile, exnum, mmsid)
					      				   
                 	// send MMS   sample ----> 	   sendMMSEx( "ZXHD-SDK-0102-******",  "123321", " mms标题  mms title ", mobile, "", mmsid)
                 	 
                    sendMMSEx( Regcode,  Pwd, content(or mms title), mobile, exnum, mmsid)
		}
     }
	
	*/

//注册方法做账号激活使用，账号激活后就不再使用。
// regcode register (only use one times)
    private String register(String Regcode, String Pwd, String enterpriseNAME,
                            String CSNAME, String Address, String LINKTEL, String LINKMAN,
                            String EMAIL, String FAX, String POSTCODE, String MOBILETEL) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "register"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in2"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in3"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in4"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in5"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in6"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in7"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in8"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in9"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in10"), XMLType.XSD_STRING, ParameterMode.IN);

            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://www.suiyizhuche.com");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd, enterpriseNAME,
                    CSNAME, Address, LINKTEL, LINKMAN,
                    EMAIL, FAX, POSTCODE, MOBILETEL});
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();

            System.out.println("ex----");
            return "-100";
        }

    }

    //   获取账户余额
    public String getbalance(String Regcode, String Pwd) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "getbalance"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);


            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://www/suiyizhuche.com");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd});
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();

            System.out.println("ex----");
            return "-100";
        }

    }

    //获取手机回复的短信
// get phone reply message.（not use）
    private String getmo(String Regcode, String Pwd) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "getmo"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);


            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://zzwx/example");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd});
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();

            System.out.println("ex----");
            return "-100";
        }

    }

    //获取手机是否收到的状态回执报告。
//get phone receive state report.
    private String getReport(String Regcode, String Pwd) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "getReport"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);


            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://www.suiyizhuche.com");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd});
            System.out.println(result);
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();

            System.out.println("ex----");
            return "-100";
        }

    }

    //获取通道的普通短信发送的长度（接口使用者可以不实现该方法，后台根据发送账号做了自动适配）
//Interface user no use.
    private String getchannelcheck(String Regcode, String Pwd, String smscontent) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "getchannelcheck"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in2"), XMLType.XSD_STRING, ParameterMode.IN);

            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://www.suiyizhuche.com");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd, smscontent});
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();
            //try{Thread.sleep(3000);}catch(Exception e){e.printStackTrace();}
            System.out.println("ex----");
            return "-100";
        }

    }

    // modify password。
    private String modifypwd(String Regcode, String Pwd, String newpwd) {
        String result = "";


        try {


            Service services = new Service();
            Call call1 = null;
            call1 = (Call) services.createCall();

            call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


            call1.setOperationName(new QName(nameSpace, "modifypwd"));
            call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);
            call1.addParameter(new QName(nameSpace, "in2"), XMLType.XSD_STRING, ParameterMode.IN);

            call1.setReturnType(XMLType.XSD_STRING);

            call1.setUseSOAPAction(true);
            call1.setSOAPActionURI("http://zzwx/example");


            result = (String) call1.invoke(new Object[]{Regcode, Pwd, newpwd});
            return result;

        } catch (Exception ex) {
            ex.printStackTrace();

            System.out.println("ex----");
            return "-100";
        }

    }

    //发送短信
    public String sendEx(String Regcode, String Pwd, String phone, String content, String extnum, String level, String sctime, String smstype) {

        String result = "";

        byte[] b;


        boolean isSentOk = false;
        int sendtimes = 0;
        while (!isSentOk) {
            try {

                //--------------------https url --------------------------

                // example：（keytool -import -file X:/zrgj.cer -storepass changeit -keystore client.truststore -alias serverkey -noprompt）
                //-----------------using after code--------------------------

                //  System.setProperty("javax.net.ssl.trustStore", "c:\\client.truststore");
                //  System.setProperty("javax.net.ssl.trustStorePassword", "changeit");

                //------------------end-----------------------------------------


                Service services = new Service();
                Call call1 = null;
                call1 = (Call) services.createCall();

                call1.setTargetEndpointAddress(new URL(strURL + SHCNN_URI_SEND));


                call1.setOperationName(new QName(nameSpace, "sendSMS"));
                call1.addParameter(new QName(nameSpace, "in0"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in1"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in2"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in3"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in4"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in5"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in6"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in7"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in8"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace, "in9"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.setReturnType(XMLType.XSD_STRING);
                call1.setUseSOAPAction(true);
                call1.setSOAPActionURI("http://suiyizhuche.com");
                result = (String) call1.invoke(new Object[]{Regcode, Pwd, phone, URLEncoder.encode(content, "gbk"), extnum, level, sctime, "1", "", smstype});
                //  System.out.println(result);
                b = result.getBytes("8859_1");
                String name = new String(b, "GBK"); //转换成GBK字符
                if (name.equals("0")) {
                    isSentOk = true;

                } else {
                    sendtimes++;
                    if (sendtimes > 1) {
                        isSentOk = true;
                    } else {

                        System.out.println("发送结果：" + name);

                        isSentOk = false;


                    }
                }
            } catch (Exception ex) {

                System.out.println("ex----");
                isSentOk = true;
            }
        }
        if (isSentOk) {
            if (sendtimes > 1)
                return "-2";
            else
                return "0";
        } else {
            return "-1";
        }
    }
  /*  
// send mms
    private String sendMMSEx(String Regcode, String Pwd,String content,String mobile,String exnum,String mmsid){
        String result = "";
      
        byte [] b;
      
        
  
      
        
        boolean isSentOk=false;
        int sendtimes=0;
        while(!isSentOk){
	        try { 
     			//--------------------https url --------------------------
            
           // example：（keytool -import -file X:/zrgj.cer -storepass changeit -keystore client.truststore -alias serverkey -noprompt）
           //-----------------using after code--------------------------
           
	            //  System.setProperty("javax.net.ssl.trustStore", "c:\\client.truststore"); 
	        	  //  System.setProperty("javax.net.ssl.trustStorePassword", "changeit"); 
	        	     
	         //------------------end-----------------------------------------	  
	        	  
	        
	        	  
	            Service services = new Service();
                Call call1 = null;
                call1 = (Call) services.createCall();

                call1.setTargetEndpointAddress(new URL(strURL+SHCNN_URI_SEND));
               

              
                call1.setOperationName(new QName(nameSpace,"sendMMS"));
                call1.addParameter(new QName(nameSpace,"in0"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in1"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in2"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in3"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in4"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in5"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in6"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in7"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in8"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in9"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.addParameter(new QName(nameSpace,"in10"), XMLType.XSD_STRING, ParameterMode.IN);
                call1.setReturnType(XMLType.XSD_STRING);

                call1.setUseSOAPAction(true);
                call1.setSOAPActionURI("http://zzwx/example");

                result = (String) call1.invoke(new Object[] {Regcode, Pwd, 
                		mobile
       				 , java.net.URLEncoder.encode(content,"gbk"),
       					"", "1", "", "1", "", "4",mmsid}); 
              //  System.out.println(result);
	
	           
	            String name = result; 

	       
	           //:OK:[201106306545812971002002]
	            if(name.equals("0")){  
	            	isSentOk=true;
	            	
	            	System.out.println((new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss")).format(new Date()) +"result:"+name);
	            
	          
	            }else{	
	            	

	            	sendtimes ++;
	            	if (sendtimes>1)
	            	{
	            		isSentOk=true;
	            	}else
	            	{
	            	 
		        		   System.out.println("result:" + name);
		        		 
			                isSentOk=false;
			                Thread.sleep(2000);
		        	   
	            	}
	            }
	        }catch(Exception ex){
	      ex.printStackTrace();
	        	try{Thread.sleep(3000);}catch(Exception e){e.printStackTrace();}
	        	isSentOk=true;
	        }
        }
        if (isSentOk)
        {
        	if (sendtimes>1)
        		return "-2";
        	else
        	return "0";
        }else
        {
            return "-1";
        }
    }
    
    */
}
